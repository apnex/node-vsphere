#----------------- Start of code capture -----------------

// ----------fetchDVPorts----------
var criteria = new VcDistributedVirtualSwitchPortCriteria();
criteria.uplinkPort = true;
managedObject.fetchDVPorts(criteria);   // VmwareDistributedVirtualSwitch-dvs-175

// ----------queryAvailableDvsSpec----------
var recommended = true;
managedObject.queryAvailableDvsSpec(recommended);   // DistributedVirtualSwitchManager-DVSManager

// ----------currentTime----------
managedObject.currentTime();   // ServiceInstance-ServiceInstance

// ----------addDVPortgroup_Task----------
var spec = new Array();
spec[0] = new VcDVPortgroupConfigSpec();
spec[0].name = 'pg-mgmt';
spec[0].defaultPortConfig = new VcVMwareDVSPortSetting();
spec[0].defaultPortConfig.uplinkTeamingPolicy = new VcVmwareUplinkPortTeamingPolicy();
spec[0].defaultPortConfig.uplinkTeamingPolicy.notifySwitches = new VcBoolPolicy();
spec[0].defaultPortConfig.uplinkTeamingPolicy.notifySwitches.inherited = false;
spec[0].defaultPortConfig.uplinkTeamingPolicy.notifySwitches.value = true;
spec[0].defaultPortConfig.uplinkTeamingPolicy.rollingOrder = new VcBoolPolicy();
spec[0].defaultPortConfig.uplinkTeamingPolicy.rollingOrder.inherited = false;
spec[0].defaultPortConfig.uplinkTeamingPolicy.rollingOrder.value = false;
spec[0].defaultPortConfig.uplinkTeamingPolicy.inherited = false;
spec[0].defaultPortConfig.uplinkTeamingPolicy.failureCriteria = new VcDVSFailureCriteria();
spec[0].defaultPortConfig.uplinkTeamingPolicy.failureCriteria.inherited = false;
spec[0].defaultPortConfig.uplinkTeamingPolicy.failureCriteria.checkBeacon = new VcBoolPolicy();
spec[0].defaultPortConfig.uplinkTeamingPolicy.failureCriteria.checkBeacon.inherited = false;
spec[0].defaultPortConfig.uplinkTeamingPolicy.failureCriteria.checkBeacon.value = false;
spec[0].defaultPortConfig.uplinkTeamingPolicy.uplinkPortOrder = new VcVMwareUplinkPortOrderPolicy();
var activeUplinkPort = new Array();
activeUplinkPort[0] = 'Uplink 1';
activeUplinkPort[1] = 'Uplink 2';
activeUplinkPort[2] = 'Uplink 3';
activeUplinkPort[3] = 'Uplink 4';
spec[0].defaultPortConfig.uplinkTeamingPolicy.uplinkPortOrder.activeUplinkPort = activeUplinkPort;
spec[0].defaultPortConfig.uplinkTeamingPolicy.uplinkPortOrder.inherited = false;
var standbyUplinkPort = new Array();
spec[0].defaultPortConfig.uplinkTeamingPolicy.uplinkPortOrder.standbyUplinkPort = standbyUplinkPort;
spec[0].defaultPortConfig.uplinkTeamingPolicy.policy = new VcStringPolicy();
spec[0].defaultPortConfig.uplinkTeamingPolicy.policy.inherited = false;
spec[0].defaultPortConfig.uplinkTeamingPolicy.policy.value = 'loadbalance_srcid';
spec[0].defaultPortConfig.blocked = new VcBoolPolicy();
spec[0].defaultPortConfig.blocked.inherited = false;
spec[0].defaultPortConfig.blocked.value = false;
spec[0].defaultPortConfig.vlan = new VcVmwareDistributedVirtualSwitchVlanIdSpec();
spec[0].defaultPortConfig.vlan.vlanId = 0;
spec[0].defaultPortConfig.vlan.inherited = false;
spec[0].defaultPortConfig.ipfixEnabled = new VcBoolPolicy();
spec[0].defaultPortConfig.ipfixEnabled.inherited = false;
spec[0].defaultPortConfig.ipfixEnabled.value = false;
spec[0].defaultPortConfig.inShapingPolicy = new VcDVSTrafficShapingPolicy();
spec[0].defaultPortConfig.inShapingPolicy.inherited = false;
spec[0].defaultPortConfig.inShapingPolicy.enabled = new VcBoolPolicy();
spec[0].defaultPortConfig.inShapingPolicy.enabled.inherited = false;
spec[0].defaultPortConfig.inShapingPolicy.enabled.value = false;
spec[0].defaultPortConfig.securityPolicy = new VcDVSSecurityPolicy();
spec[0].defaultPortConfig.securityPolicy.allowPromiscuous = new VcBoolPolicy();
spec[0].defaultPortConfig.securityPolicy.allowPromiscuous.inherited = false;
spec[0].defaultPortConfig.securityPolicy.allowPromiscuous.value = false;
spec[0].defaultPortConfig.securityPolicy.forgedTransmits = new VcBoolPolicy();
spec[0].defaultPortConfig.securityPolicy.forgedTransmits.inherited = false;
spec[0].defaultPortConfig.securityPolicy.forgedTransmits.value = true;
spec[0].defaultPortConfig.securityPolicy.inherited = false;
spec[0].defaultPortConfig.securityPolicy.macChanges = new VcBoolPolicy();
spec[0].defaultPortConfig.securityPolicy.macChanges.inherited = false;
spec[0].defaultPortConfig.securityPolicy.macChanges.value = true;
spec[0].defaultPortConfig.outShapingPolicy = new VcDVSTrafficShapingPolicy();
spec[0].defaultPortConfig.outShapingPolicy.inherited = false;
spec[0].defaultPortConfig.outShapingPolicy.enabled = new VcBoolPolicy();
spec[0].defaultPortConfig.outShapingPolicy.enabled.inherited = false;
spec[0].defaultPortConfig.outShapingPolicy.enabled.value = false;
spec[0].numPorts = 8;
spec[0].type = 'earlyBinding';
spec[0].autoExpand = true;
spec[0].vmVnicNetworkResourcePoolKey = '-1';
managedObject.addDVPortgroup_Task(spec);   // VmwareDistributedVirtualSwitch-dvs-175


#----------------- End of code capture -----------------
